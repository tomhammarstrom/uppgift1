package src.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;	
import java.sql.*;



public class Dal {
	private Connection con;
	private String errorMessage;

	
	// konstruktor
    public Dal(){
			registerDriver();
    }
    
    /**
     * Error
     * 
     */
    
    public String getCurrentErrorMessage(){
    	return errorMessage;
    }
    
    
    /**
     * Generella funktioner
     *
     */

    // registrerar drivrutin
    public void registerDriver(){
        try {
        	DriverManager.registerDriver(new com.microsoft.sqlserver.jdbc.SQLServerDriver());
		} catch (SQLException e) {
			errorMessage = "Problem med att ladda driver";
			e.printStackTrace();
		}
    }
    
	// körs innan varje resultset hämtas. 
	public Connection connect() {
		try {
		String url = "jdbc:sqlserver://10.211.55.3:1433; database=uppgift1DB; user=sa; password=1234;";
			con = DriverManager.getConnection(url);
			
		} catch (SQLException e) {
			System.out.println("?");
			errorMessage = "Problem med att skapa en connection";
			e.printStackTrace();
		}
		return con;
	}

	/**
	 * Studentfunktioner
	 * 
	 */

	// hämtar 1 student
	public ResultSet getStudent(String pnr) throws SQLException {
		PreparedStatement ps = connect().prepareStatement("select * from student where pnr = ?");
		ps.setString(1, pnr);

		return ps.executeQuery();
	}

	// hämtar alla studenter
	public ResultSet getStudents() throws SQLException {
		PreparedStatement ps = connect().prepareStatement(
				"select * from student");
		return ps.executeQuery();
	}

	// lägger till ELLER ändrar en student
	public int addStudent(String choice, String pnr, String sName, 
		String sAddress, int sTelNr) throws SQLException {
		int affectedRows = 0;

		if (choice.equals("add")) {
			if (getStudent(pnr).next()) {
				affectedRows = 0;
				errorMessage = "student finns redan";
			} 
			else {
				PreparedStatement s = connect().prepareStatement(
						"insert into student values(?,?,?,?)");
				s.setString(1, pnr);
				s.setString(2, sName);
				s.setString(3, sAddress);
				s.setInt(4, sTelNr);
				affectedRows = s.executeUpdate();
			}
		}

		else if (choice.equals("change")) {
			PreparedStatement s = connect()
					.prepareStatement(
							"update student set pnr = ?,sName = ?, sAddress = ?, sTelnN = ? where pnr = ?");
			s.setString(1, pnr);
			s.setString(2, sName);
			s.setString(3, sAddress);
			s.setInt(4, sTelNr);
			affectedRows = s.executeUpdate();
		}

		return affectedRows;
	}

	// tar bort en student
	public int removeStudent(String pnr) throws SQLException {
		PreparedStatement s = connect().prepareStatement(
				"delete from student where pnr = ?");
		s.setString(1, pnr);
		return s.executeUpdate();
	}

	// hämtar alla kurser studenten inte är klar med, övriga kolumner är för
	// redovisning
	public ResultSet getNotFinishedWithCourse(String courseId) throws SQLException {
		PreparedStatement ps = connect()
				.prepareStatement(
						"select a.courseId, b.pnr, b.sName from studies a join student b on a.pnr = b.pnr where id = ?");
		ps.setString(1, courseId);
		ResultSet r = ps.executeQuery();
		return r;
	}

	// hämtar alla kurser studenten är klar med, övriga kolumner är för
	// redovisning
	public ResultSet getFinishedWithCourse(String courseId) throws SQLException {
		PreparedStatement ps = connect()
				.prepareStatement(
						"select a.courseId, b.pnr, b.sName, a.grade from studied a join student b on a.pnr = b.pnr where id = ?");
		ps.setString(1, courseId);
		ResultSet r = ps.executeQuery();
		return r;
	}

	/**
	 * Kursfunktioner
	 * 
	 */

	// hämtar en kurs
	public ResultSet getCourse(String courseId) throws SQLException {
		PreparedStatement stmnt = connect().prepareStatement(
				"select * from course where courseId = ?");
		stmnt.setString(1, courseId);
		return stmnt.executeQuery();
	}

	// hämtar alla kurser
	public ResultSet getCourses() throws SQLException {
		PreparedStatement stmnt = connect().prepareStatement(
				"select * from course");
		return stmnt.executeQuery();
	}

	// lägger till ELLER ÄNDRAR en kurs
	public int addCourse(String choice, String courseId, String cName,
			String cDescription, int points) throws SQLException {
		int affectedRows = 0;

		if (choice.equals("add")) {
			if (getCourse(courseId).next()) {
				errorMessage = "kurs finns redan";
				affectedRows = 0;
			} else {
				PreparedStatement s = connect().prepareStatement(
						"insert into course values(?,?,?,?)");
				s.setString(1, courseId);
				s.setString(2, cName);
				s.setInt(3, points);
				s.setString(4, cDescription);

				affectedRows = s.executeUpdate();
			}
		}

		else if (choice.equals("change")) {
			PreparedStatement s = connect()
					.prepareStatement(
							"update course set courseId = ?, sName = ?, points = ?, descr = ? where courseId = ?");
			s.setString(1, courseId);
			s.setString(2, cName);
			s.setInt(3, points);
			s.setString(4, cDescription);
			s.setString(5, courseId);
			affectedRows = s.executeUpdate();
		}

		return affectedRows;
	}

	// tar bort en kurs
	public int removeCourse(String courseId) throws SQLException {
		PreparedStatement s = connect().prepareStatement(
				"delete from course where courseId = ?");
		s.setString(1, courseId);
		return s.executeUpdate();
	}

	// hämtar alla pågående kurser för en specifik student
	public ResultSet getCoursesForStudent(String pnr) throws SQLException {
		PreparedStatement stmnt = connect()
				.prepareStatement(
						"select a.pnr, a.id, b.sName, b.points from studies a join course b on a.courseId = b.courseId where a.pnr = ?");
		stmnt.setString(1, pnr);
		return stmnt.executeQuery();
	}

	// Hämtar alla avslutade kurser för en specifik student
	public ResultSet getFinishedCoursesForStudent(String pnr)
			throws SQLException {
		PreparedStatement stmnt = connect()
				.prepareStatement(
						"select a.pnr, a.courseId, b.cName, a.grade, b.points from studied a join course b on a.courseId = b.courseId where a.pnr = ?");
		stmnt.setString(1, pnr);
		return stmnt.executeQuery();
	}

	/**
	 * Funktioner för att starta/avsluta kurser
	 * 
	 * @throws SQLException
	 * 
	 */

	// påbörjar ny kurs
	public int startCourse(String pnr, String courseId) throws SQLException {

		if(hasFinished(pnr, courseId) && hasStarted(pnr, courseId) && maxPoints(pnr, courseId)){
			PreparedStatement s = con.prepareStatement("insert into studies values(?,?)");
			s.setString(1, pnr);
			s.setString(2, courseId);
			return s.executeUpdate();
		}
		return 0;
	}

	// koll om student redan läser kurs
	private boolean hasStarted(String pnr, String courseId) throws SQLException {
		PreparedStatement s = connect().prepareStatement(
				"select * from studies where pnr = ?");
		s.setString(1, pnr);
		ResultSet activeCourses = s.executeQuery();

		while (activeCourses.next()) {
			String comp = activeCourses.getString(2);

			if (comp==courseId) {
				errorMessage = "Student läser redan kurs";
				return false;
			}
		}
		return true;
	}

	// koll om student har avslutat kurs
	private boolean hasFinished(String pnr, String courseId) throws SQLException{
		
		ResultSet finishedCourses = getFinishedCoursesForStudent(pnr);

		while (finishedCourses.next()) {
			String comp = finishedCourses.getString(2);
			if (comp==courseId) {
				errorMessage = "Student har redan avslutat kurs";
				return false;
			}
		}
		return true;
	}

	// kontrollerar så studenten läser (kommer läsa) mindre än eller lika med
	// 45p
	private boolean maxPoints(String pnr, String courseId) throws SQLException {
		PreparedStatement s = connect()
				.prepareStatement(
						"select sum(points) from course where courseId in (select courseId from studies where pnr = ?)");
		s.setString(1, pnr);
		ResultSet r = s.executeQuery();
		
		int newPoints = 0;
		ResultSet courseInfo = getCourse(courseId);
		while (courseInfo.next()) {
			newPoints = courseInfo.getInt(3);
		}
		
		while (r.next()) {
			int amount = r.getInt(1) + newPoints;
			if (amount >= 45) {
				errorMessage = "Student läser för många poäng (" + amount + "). Max = 45p";
				return false;
			} 
		}
		
		return true;
	}

	// avslutar en kurs med betyg
	public int endCourse(String pnr, String courseId, String grade)
			throws SQLException {
		PreparedStatement s = connect().prepareStatement(
				"delete from studies where pnr = ? and courseId = ?");
		s.setString(1, pnr);
		s.setString(2, courseId);
		s.executeUpdate();

		s = connect().prepareStatement("insert into studied values(?,?,?)");
		s.setString(1, pnr);
		s.setString(2, courseId);
		s.setString(3, grade);

		return s.executeUpdate();
	}

	// avregistrerar från en kurs
	public int cancelCourse(String pnr, String courseId) throws SQLException {
		PreparedStatement s = connect().prepareStatement(
				"delete from studies where pnr = ? and courseId = ?");
		s.setString(1, pnr);
		s.setString(2, courseId);
		return s.executeUpdate();
	}

	/**
	 * Statistik osv
	 * 
	 */

	// hämtar resultatet på en kurs för en student
	public ResultSet studentResults(String pnr, String courseId)
			throws SQLException {
		PreparedStatement s = connect()
				.prepareStatement(
						"select s.pnr, c.grade from student s join studied c on s.pnr = c.pnr where s.pnr = (select pnr from studied where pnr = ? and courseId = ?)");
		s.setString(1, pnr);
		s.setString(2, courseId);

		return s.executeQuery();
	}

	// hämtar alla studenters resultat på en viss kurs
	public ResultSet courseResults(String courseId) throws SQLException {
		PreparedStatement s = connect().prepareStatement(
				"select pnr, grade from studied where courseId =?");
		s.setString(1, courseId);

		return s.executeQuery();
	}

	// hämtar alla studenter som inte är klara med en kurs
	public ResultSet studentsNotDone(String pnr) throws SQLException {
		PreparedStatement s = connect().prepareStatement(
				"select pnr from studies where courseId =?");
		s.setString(1, pnr);

		return s.executeQuery();
	}

	// räknar ut hur många som fått A på en kurs
	public float numberOfA(String courseId) throws SQLException {
		PreparedStatement s = connect().prepareStatement(
				"select grade from studied where courseId = ?");
		s.setString(1, courseId);

		ResultSet calc = s.executeQuery();
		int a = 0;
		int theRest = 0;

		while (calc.next()) {
			if (calc.getString(1).trim().equals("A")) {
				a++;
			} else {
				theRest++;
			}
		}
		try {
			return (float) a / (a + theRest);
		} catch (ArithmeticException e) {

		}
		return 0;
	}

	// räknar ut vilken kurs som har högst genomströmning
	public String highestFlow() throws SQLException {
		PreparedStatement s = connect()
				.prepareStatement(
						"select courseId, count(*) as passes from studied where grade != 'U' group by courseId");
		ResultSet calc = s.executeQuery();

		String best = null;
		int value = 0;

		while (calc.next()) {
			String currentString = calc.getString(1);
			int current = calc.getInt(2);

			if (current > value) {
				best = currentString;
				value = current;
			}
		}

		return best;
	}

}
